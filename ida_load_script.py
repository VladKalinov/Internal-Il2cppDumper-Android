#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
IDA Pro Script for Loading IL2CPP Dump Data
Automatically names functions based on script.json generated by Il2CppDumper Extended

Usage:
1. Open libil2cpp.so in IDA Pro
2. File -> Script file -> Select this script
3. Select the script.json file when prompted
4. Wait for processing to complete

Author: Il2CppDumper Extended
"""

import json
import os
import idaapi
import idc
import idautils

def load_script_json(json_path):
    """Load and parse script.json file"""
    print("[*] Loading script.json from: {}".format(json_path))
    
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print("[+] Successfully loaded script.json")
        return data
    except Exception as e:
        print("[-] Error loading script.json: {}".format(e))
        return None

def apply_method_names(script_data):
    """Apply method names from script.json to IDA database"""
    if 'ScriptMethod' not in script_data:
        print("[-] No ScriptMethod data found in script.json")
        return
    
    methods = script_data['ScriptMethod']
    print("[*] Found {} methods to process".format(len(methods)))
    
    success_count = 0
    failed_count = 0
    
    for method in methods:
        try:
            address = method.get('Address')
            rva = method.get('RVA')
            name = method.get('Name')
            signature = method.get('Signature')
            type_sig = method.get('TypeSignature')
            
            if not address or not name:
                continue
            
            # Get base address of loaded module
            base_addr = idaapi.get_imagebase()
            
            # Calculate actual address (use RVA + base)
            actual_addr = base_addr + rva if rva else address
            
            # Check if address is valid
            if not idc.is_loaded(actual_addr):
                failed_count += 1
                continue
            
            # Create clean function name
            # Replace invalid characters
            clean_name = name.replace('<', '_').replace('>', '_').replace('.', '_')
            clean_name = clean_name.replace('$', '_').replace(' ', '_')
            
            # Add type signature prefix if available
            if type_sig:
                clean_type = type_sig.replace('.', '_').replace('<', '_').replace('>', '_')
                full_name = "{}_{}".format(clean_type, clean_name)
            else:
                full_name = clean_name
            
            # Ensure function exists at address
            if not idc.get_func_attr(actual_addr, idc.FUNCATTR_START):
                idc.create_insn(actual_addr)
                idc.add_func(actual_addr)
            
            # Set function name
            if idc.set_name(actual_addr, full_name, idc.SN_NOWARN | idc.SN_NOCHECK):
                success_count += 1
                
                # Set function comment with signature
                if signature:
                    idc.set_func_cmt(actual_addr, signature, 0)
            else:
                # Try with address suffix if name collision
                unique_name = "{}_{}".format(full_name, hex(actual_addr))
                if idc.set_name(actual_addr, unique_name, idc.SN_NOWARN | idc.SN_NOCHECK):
                    success_count += 1
                else:
                    failed_count += 1
            
            # Update progress every 100 methods
            if (success_count + failed_count) % 100 == 0:
                print("[*] Progress: {} methods processed ({} success, {} failed)".format(
                    success_count + failed_count, success_count, failed_count))
                
        except Exception as e:
            failed_count += 1
            continue
    
    print("[+] Completed! {} methods renamed successfully, {} failed".format(
        success_count, failed_count))

def main():
    """Main function"""
    print("=" * 60)
    print("IL2CPP Script Loader for IDA Pro")
    print("=" * 60)
    
    # Ask user for script.json path
    json_path = idc.ask_file(0, "*.json", "Select script.json file")
    
    if not json_path:
        print("[-] No file selected. Exiting.")
        return
    
    if not os.path.exists(json_path):
        print("[-] File not found: {}".format(json_path))
        return
    
    # Load script.json
    script_data = load_script_json(json_path)
    if not script_data:
        return
    
    # Apply method names
    print("[*] Starting to apply method names...")
    apply_method_names(script_data)
    
    print("[+] Script execution completed!")
    print("=" * 60)

if __name__ == "__main__":
    main()
